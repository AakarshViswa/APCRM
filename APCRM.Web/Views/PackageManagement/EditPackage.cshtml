@model PackageViewModel
@{
    ViewData["Title"] = "Edit Package / Package Management";
}

<div class="pagetitle">
    <h1>Product Management</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-controller="Settings" asp-action="Index">Settings</a></li>
            <li class="breadcrumb-item"><a asp-controller="PackageManagement" asp-action="Index">Package Management</a></li>
            <li class="breadcrumb-item active"> Edit Package </li>
        </ol>
    </nav>
</div><!-- End Page Title -->

<section class="section">
    <div class="card">
        <div class="card-body">
           
            <form method="post">
                 <h5 class="card-title">Edit Package <button type="submit" class="btn btn-success rounded-fill float-lg-end"> Update Package</button></h5> 
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Package</h5>
                        <div class="row">
                            <div class="col-sm-6">
                                <label asp-for="package.Name" class="form-label">Package Name</label>
                                <input asp-for="package.Name" type="text" class="form-control" required />
                                <input type="hidden" asp-for="package.Id"/>
                            </div>
                            <div class="col-sm-6">
                                <label asp-for="package.TotalPackagePrice" class="form-label">Total Package Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">₹</span>
                                    <input asp-for="package.TotalPackagePrice" type="number" class="packageCost form-control" required readonly />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Product</h5>
                        <div class="productTable">
                            @for (int i = 0; i < Model.package.ProductDockets.Count; i++)
                            {
                                <div class="row mb-2 alacartproduct">
                                    <div class="col-1">
                                        <a class="add btn btn-success m-3 " onclick="addNewProductRow(this);"><i class="bx bx-plus-circle"></i></a>
                                    </div>
                                    <div class="col-3">
                                        <input type="hidden" asp-for="package.ProductDockets[i].Id"/>
                                        <label asp-for="package.ProductDockets[i].ProductId">Product</label>
                                        <select id="ProductId" asp-for="package.ProductDockets[i].ProductId" class="form-select Product" onchange="updateProductDetails(this);">
                                            <option disabled value="" selected>Select a Product</option>
                                            @foreach (var obj in Model.products)
                                            {
                                                <option value="@obj.Id" prd-price=@obj.ProductPrice>@obj.ProductName</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-3">
                                        <label asp-for="package.ProductDockets[i].product.ProductPrice">Product Unit Price</label>
                                        <input asp-for="package.ProductDockets[i].product.ProductPrice" class="unitCost form-control" type="text" disabled />
                                    </div>
                                    <div class="col-1">
                                        <label asp-for="package.ProductDockets[i].Quantity">Quantity</label>
                                        <input asp-for="package.ProductDockets[i].Quantity" class="qty form-control" type="number" def-val="1" />
                                    </div>
                                    <div class="col-3">
                                        <label>Product Total Cost</label>
                                        <input class="rowCost form-control" type="number" disabled />
                                    </div>
                                    <div class="col-1">
                                        <a class="remove btn btn-danger mt-3" onclick="removeThisProductRow(this);"><i class="bx bx-minus-circle"></i></a>
                                    </div>
                                </div>
                            }
                        </div>
                        <input type="hidden" id="hdninitialIndex" value="0" />
                        <input type="hidden" id="hdnLastIndex" asp-for="PLastIndex" />
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Deliverable</h5>
                        <div class="deliverableTable">
                            @for (int i = 0; i < Model.package.DeliverableDockets.Count; i++)
                            {
                                <div class="row mb-2 alacartdeliverable">
                                    <div class="col-1">
                                        <a class="Dadd btn btn-success m-3" onclick="addNewdeliverableRow(this);"><i class="bx bx-plus-circle"></i></a>
                                    </div>
                                    <div class="col-3">
                                        <input type="hidden" asp-for="package.DeliverableDockets[i].Id"/>
                                        <label asp-for="package.DeliverableDockets[i].DeliverableId">Deliverable</label>
                                        <select asp-for="package.DeliverableDockets[i].DeliverableId" class="form-select deliverable" onchange="updateDeliverableDetails(this);">
                                            <option disabled selected="">Select a Deliverable</option>
                                            @foreach (var obj in Model.deliverables)
                                            {
                                                <option value="@obj.Id" del-price="@obj.DeliverablePrice">@obj.DeliverableName</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-3">
                                        <label asp-for="package.DeliverableDockets[i].deliverable.DeliverablePrice">Deliverable Unit Price</label>
                                        <input asp-for="package.DeliverableDockets[i].deliverable.DeliverablePrice" class="form-control unitCost" type="text" disabled />
                                    </div>
                                    <div class="col-1">
                                        <label asp-for="package.DeliverableDockets[i].Quantity">Quantity</label>
                                        <input asp-for="package.DeliverableDockets[i].Quantity" class="form-control qty" type="number" def-val="1" />
                                    </div>
                                    <div class="col-3">
                                        <label>Total Delliverable Cost</label>
                                        <input class="form-control rowCost" type="text" disabled />
                                    </div>
                                    <div class="col-1">
                                        <a class="Dremove btn btn-danger mt-3" onclick="removeThisdeliverableRow(this);"><i class="bx bx-minus-circle"></i></a>
                                    </div>
                                </div>
                            }
                        </div>
                        <input type="hidden" id="DhdninitialIndex" value="0" />
                        <input type="hidden" id="DhdnLastIndex" asp-for="DLastIndex"  />
                    </div>
                </div>

               
            </form>
        </div>
    </div>
</section>
@section Scripts
{
     <script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
        $(document).ready(function () {
        reCalculateCost();
    });



    function updateProductDetails(ele) {
            var productId = $(ele).val();
            var row = $(ele).closest("div.row" );
            if (productId == "") {
                $(row).find("input.qty").val("1");
                $(row).find("input.unitCost").val("0");
                $(row).find("input.rowCost").val("0.00");
            } else {
                var qty = $(row).find("input.qty").attr("def-val");
                var unitCost = parseFloat($('option:selected', ele).attr('prd-price')).toFixed(2);
                var rowCost = parseFloat(qty * unitCost).toFixed(2);
                $(row).find("input.qty").val(qty);
                $(row).find("input.unitCost").val(unitCost);
                $(row).find("input.unitCost").attr("def-val", unitCost);
                $(row).find("input.rowCost").val(rowCost);
            }
            reCalculateCost();
        }

     function updateDeliverableDetails(ele) {
            var productId = $(ele).val();
            var row = $(ele).closest("div.row" );
            if (productId == "") {
                $(row).find("input.qty").val("1");
                $(row).find("input.unitCost").val("0");
                $(row).find("input.rowCost").val("0.00");
            } else {
                var qty = $(row).find("input.qty").attr("def-val");
                var unitCost = parseFloat($('option:selected', ele).attr('del-price')).toFixed(2);
                var rowCost = parseFloat(qty * unitCost).toFixed(2);
                $(row).find("input.qty").val(qty);
                $(row).find("input.unitCost").val(unitCost);
                $(row).find("input.unitCost").attr("def-val", unitCost);
                $(row).find("input.rowCost").val(rowCost);
            }
            reCalculateCost();
        }

     function addNewProductRow(ele) {
           var row = $(ele).closest("div.productTable").find("div.alacartproduct:first").clone();

           $(row).find("select.Product").val("");
           $(row).find("input.qty").val("1");
           $(row).find("input.unitCost").val("");
           $(row).find("input.rowCost").val("");

           var lastrowIdx = document.getElementById('hdnLastIndex').value;
           var initialIdx = document.getElementById('hdninitialIndex').value;
           var nextrowIdx = eval(lastrowIdx) + 1;

           document.getElementById('hdnLastIndex').value = nextrowIdx;
           $(row).find("select.Product")[initialIdx].name = $(row).find("select.Product")[initialIdx].name.replaceAll('['+initialIdx+']','['+nextrowIdx+']');
           $(row).find("input.qty")[initialIdx].name = $(row).find("input.qty")[initialIdx].name.replaceAll('['+initialIdx+']','['+nextrowIdx+']');

           $(ele).closest("div.productTable").append(row);
         }

    function removeThisProductRow(ele) {
         var lastrowIdx = document.getElementById('hdnLastIndex').value;
         if(lastrowIdx>0)
         {
            var nextrowIdx = eval(lastrowIdx) - 1;
            document.getElementById('hdnLastIndex').value = nextrowIdx;
            var row = $(ele).closest("div.row").remove();
            reCalculateCost();
         }
    }

    function addNewdeliverableRow(ele) {
           var row = $(ele).closest("div.deliverableTable").find("div.alacartdeliverable:first").clone();

           $(row).find("select.deliverable").val("");
           $(row).find("input.qty").val("1");
           $(row).find("input.unitCost").val("");
           $(row).find("input.rowCost").val("");

           var lastrowIdx = document.getElementById('DhdnLastIndex').value;
           var initialIdx = document.getElementById('DhdninitialIndex').value;
           var nextrowIdx = eval(lastrowIdx) + 1;

           document.getElementById('DhdnLastIndex').value = nextrowIdx;
           $(row).find("select.deliverable")[initialIdx].name = $(row).find("select.deliverable")[initialIdx].name.replaceAll('['+initialIdx+']','['+nextrowIdx+']');
           $(row).find("input.qty")[initialIdx].name = $(row).find("input.qty")[initialIdx].name.replaceAll('['+initialIdx+']','['+nextrowIdx+']');

           $(ele).closest("div.deliverableTable").append(row);
         }

    function removeThisdeliverableRow(ele) {
             var lastrowIdx = document.getElementById('DhdnLastIndex').value;
             if(lastrowIdx>0)
             {
                 var nextrowIdx = eval(lastrowIdx) - 1;
                 document.getElementById('DhdnLastIndex').value = nextrowIdx;
                 var row = $(ele).closest("div.row").remove();
                 reCalculateCost();
             }
         }
    function reCalculateCost(){
            var qty = 0;
            var unitCost = 0;
            var rowCost = 0;
             var dqty = 0;
            var dunitCost = 0;
            var drowCost = 0;
            var packageCost = 0;
            var productCost = 0;
            var deliverableCost = 0;
            $("div.productTable div.row").each(function (i, row) {
                if (!$(row).hasClass('ignore')) {
                    qty = parseFloat($(row).find("input.qty").val());
                    unitCost = parseFloat($(row).find("input.unitCost").val());
                    if(isNaN(qty) || isNaN(unitCost)) {
                        rowCost = 0;
                    } else {
                        rowCost = parseFloat(qty * unitCost);
                    }
                    $(row).find("input.rowCost").val(rowCost.toFixed(2));
                    productCost = parseFloat(productCost + rowCost);
                }
            });

             $("div.deliverableTable div.row").each(function (i, row) {
                if (!$(row).hasClass('ignore')) {
                    dqty = parseFloat($(row).find("input.qty").val());
                    dunitCost = parseFloat($(row).find("input.unitCost").val());
                    if(isNaN(dqty) || isNaN(dunitCost)) {
                        drowCost = 0;
                    } else {
                        drowCost = parseFloat(dqty * dunitCost);
                    }
                    $(row).find("input.rowCost").val(drowCost.toFixed(2));
                    deliverableCost = parseFloat(deliverableCost + drowCost);
                }
            });

            packageCost=productCost+deliverableCost;

            $(document).find("input.packageCost").val(packageCost.toFixed(2));
            //$(document).find("input.packageCost")[0].value= packageCost.toFixed(2);
    }


</script>
}

